class Solution(object):
    def addOperators(self, num, target):
        """
        :type num: str
        :type target: int
        :rtype: List[str]
        """

        if num == '':
            return []

        result = []
        for nums in self._generate_num(num, 0):
            cached_result = {}
            for r in self._generate_ops(nums, target, len(nums) - 1, cached_result):
                result.append(r)
        return result

    def _generate_num(self, s, index):
        assert 0 <= index < len(s)

        if index == len(s) - 1:
            yield [int(s[index])]
        elif s[index] == '0':
            for r in self._generate_num(s, index + 1):
                rr = [0]
                rr.extend(r)
                yield rr
        else:
            for i in range(index + 1, len(s)):
                for r in self._generate_num(s, i):
                    rr = [int(s[index:i])]
                    rr.extend(r)
                    yield rr

            yield [int(s[index:])]

    def _generate_ops(self, nums, target, index, cached_result):
        assert 0 <= index < len(nums)

        result = cached_result.get(index, {}).get(target)
        if result is not None:
            return result

        result = []

        n = 1
        s = ''
        for i in range(index, -1, -1):
            n *= nums[i]
            if s == '':
                s = str(nums[i])
            else:
                s = str(nums[i]) + '*' + s

            if i == 0:
                if n == target:
                    result.append(s)
            else:
                for r in self._generate_ops(nums, target - n, i - 1, cached_result):
                    result.append(r + '+' + s)
                for r in self._generate_ops(nums, target + n, i - 1, cached_result):
                    result.append(r + '-' + s)
        cached_result.setdefault(index, {})[target] = result
        return result


def test():
    for num, target, er in (
            ('', 10, []),
            ('123', 6, ['1+2+3', '1*2*3']),
            ('232', 8, ['2*3+2', '2+3*2']),
            ('105', 5, ['1*0+5', '10-5']),
            ('00', 0, ['0+0', '0-0', '0*0']),
            ('3456237490', 9191, []),
            ('123456789', 45,
             ['1*2*3*4*5-6-78+9', '1*2*3*4+5+6-7+8+9', '1*2*3+4+5+6+7+8+9', '1*2*3+4+5-6*7+8*9', '1*2*3+4-5*6+7*8+9',
              '1*2*3+4-5*6-7+8*9', '1*2*3-4*5+6*7+8+9', '1*2*3-4*5-6+7*8+9', '1*2*3-4*5-6-7+8*9', '1*2*3-45+67+8+9',
              '1*2*34+56-7-8*9', '1*2*34-5+6-7-8-9', '1*2+3*4-56+78+9', '1*2+3+4+5*6+7+8-9', '1*2+3+4-5+6*7+8-9',
              '1*2+3+4-5-6+7*8-9', '1*2+3+45+67-8*9', '1*2+3-45+6+7+8*9', '1*2+34+5-6-7+8+9', '1*2+34+56-7*8+9',
              '1*2+34-5+6+7-8+9', '1*2+34-56+7*8+9', '1*2+34-56-7+8*9', '1*2-3*4+5+67-8-9', '1*2-3+4-5-6*7+89',
              '1*2-3-4*5+67+8-9', '1*2-3-4+56-7-8+9', '1*2-34+5*6+7*8-9', '1*23+4*5-6+7-8+9', '1*23-4-56-7+89',
              '1+2*3*4*5+6+7-89', '1+2*3*4+5*6+7-8-9', '1+2*3*4-5+6*7-8-9', '1+2*3+4*5*6+7-89', '1+2*3+4*5-6+7+8+9',
              '1+2*3-4-5-6*7+89', '1+2*34-5*6+7+8-9', '1+2+3*4*5+6-7-8-9', '1+2+3*4+5+6*7-8-9', '1+2+3*45-6-78-9',
              '1+2+3+4+5+6+7+8+9', '1+2+3+4+5-6*7+8*9', '1+2+3+4-5*6+7*8+9', '1+2+3+4-5*6-7+8*9', '1+2+3-4*5+6*7+8+9',
              '1+2+3-4*5-6+7*8+9', '1+2+3-4*5-6-7+8*9', '1+2+3-45+67+8+9', '1+2-3*4*5+6+7+89', '1+2-3*4+5*6+7+8+9',
              '1+2-3*4-5+6*7+8+9', '1+2-3*4-5-6+7*8+9', '1+2-3*4-5-6-7+8*9', '1+2-3+4*5+6*7-8-9', '1+2-3+45+6-7-8+9',
              '1+2-3+45-6+7+8-9', '1+2-3-4-5*6+7+8*9', '1+2-3-45-6+7+89', '1+2-34+5+6+7*8+9', '1+2-34+5+6-7+8*9',
              '1+2-34-5-6+78+9', '1+23*4+5-6-7*8+9', '1+23*4-5-6*7+8-9', '1+23*4-56+7-8+9', '1+23+4+5+6+7+8-9',
              '1+23+4-5*6+7*8-9', '1+23+4-5-67+89', '1+23-4*5+6*7+8-9', '1+23-4*5-6+7*8-9', '1+23-4-5+6+7+8+9',
              '1+23-4-5-6*7+8*9', '1+23-45+67+8-9', '1-2*3*4+5-6+78-9', '1-2*3*4-5-6+7+8*9', '1-2*3+4*5+6+7+8+9',
              '1-2*3+4*5-6*7+8*9', '1-2*3+4+5+6*7+8-9', '1-2*3+4+5-6+7*8-9', '1-2*3+4+56+7-8-9', '1-2*3+45-67+8*9',
              '1-2*3-4+5*6+7+8+9', '1-2*3-4-5+6*7+8+9', '1-2*3-4-5-6+7*8+9', '1-2*3-4-5-6-7+8*9', '1-2*34+5*6-7+89',
              '1-2+3*4*5-6-7+8-9', '1-2+3+4-5*6+78-9', '1-2+3+45+6-7+8-9', '1-2+3-4*5-6+78-9', '1-2+3-45+6-7+89',
              '1-2-3*4+5+6+7*8-9', '1-2-3*4-5-6+78-9', '1-2-3+4-5+67-8-9', '1-2-3+45-6-7+8+9', '1-2-34+5+6+78-9',
              '1-2-34+56+7+8+9', '1-2-34-5+6+7+8*9', '1-23*4+5+6*7+89', '1-23+4*5-6*7+89', '1-23+4-5+67-8+9',
              '1-23+45-67+89', '1-23-4+5+67+8-9', '1-23-4-5-6-7+89', '12*3*4-5*6-78+9', '12*3+4+5+6-7-8+9',
              '12*3+4+5-6+7+8-9', '12*3-4-5-6+7+8+9', '12*3-4-56+78-9', '12+3*4+5+6-7+8+9', '12+3*45-6-7-89',
              '12+3+4-56-7+89', '12+3-4*5+67-8-9', '12+3-45+6+78-9', '12+34-5-6-7+8+9', '12-3*4*5+6+78+9',
              '12-3*4-5+67-8-9', '12-3+4*5+6-7+8+9', '12-3+4+56-7-8-9', '12-3-4+5*6-7+8+9', '12-3-4-56+7+89',
              '12-3-45-6+78+9']),
    ):
        rs = Solution().addOperators(num, target)

        er.sort()
        rs.sort()
        print num, target

        i = 0
        j = 0
        while i < len(er) and j < len(rs):
            a1 = er[i]
            a2 = rs[j]
            if a1 == a2:
                # print 'Equal:', a1, a2
                i += 1
                j += 1
            elif a1 < a2:
                print '>>>>> Fail', a1, '.' * len(a1)
                i += 1
            else:
                print '>>>>> Fail', '.' * len(a2), a2
                j += 1
        for a in er[i:]:
            print '>>>>> Fail', a, '.' * len(a)
        for a in rs[j:]:
            print '>>>>> Fail', a, '.' * len(a)


test()
